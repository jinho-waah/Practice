import sys
input = sys.stdin.readline

# 입력 받기
N, M = map(int, input().split())
grid = [list(map(int, input().split())) for _ in range(N)]

# 테트로미노의 모든 모양 (회전 및 대칭 포함)
shapes = [
    # 1x4 막대 모양
    [(0, 0), (0, 1), (0, 2), (0, 3)],
    [(0, 0), (1, 0), (2, 0), (3, 0)],

    # 2x2 정사각형 모양
    [(0, 0), (0, 1), (1, 0), (1, 1)],

    # L자 모양
    [(0, 0), (1, 0), (2, 0), (2, 1)],
    [(0, 0), (0, 1), (1, 1), (2, 1)],
    [(0, 0), (1, 0), (2, 0), (2, -1)],
    [(0, 0), (0, 1), (1, 0), (2, 0)],

    [(0, 0), (1, 0), (1, 1), (1, 2)],
    [(0, 0), (0, 1), (0, 2), (1, 0)],
    [(0, 0), (0, 1), (0, 2), (1, 2)],
    [(0, 0), (1, 0), (1, -1), (1, -2)],

    # Z자 모양
    [(0, 0), (1, 0), (1, 1), (2, 1)],
    [(0, 0), (0, 1), (1, 1), (1, 2)],
    [(0, 0), (1, 0), (1, -1), (2, -1)],
    [(0, 0), (0, 1), (-1, 1), (-1, 2)],

    # T자 모양
    [(0, 0), (0, 1), (0, 2), (1, 1)],
    [(0, 0), (1, 0), (2, 0), (1, 1)],
    [(0, 0), (1, -1), (1, 0), (1, 1)],
    [(0, 0), (1, 0), (1, -1), (2, 0)]
]

max_sum = 0

# 각 좌표에서 테트로미노를 놓아보고 최대 합 찾기
for i in range(N):
    for j in range(M):
        for shape in shapes:
            current_sum = 0
            valid = True
            for dx, dy in shape:
                nx, ny = i + dx, j + dy
                if 0 <= nx < N and 0 <= ny < M:
                    current_sum += grid[nx][ny]
                else:
                    valid = False
                    break
            if valid:
                max_sum = max(max_sum, current_sum)

print(max_sum)

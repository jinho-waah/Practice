# 공통 부분 문자열(LCS, Longest Common Subsequence)을 알아야 이 문제를 풀 수 있음
#

S1 = input()
S2 = input()

len_S1 = len(S1)
len_S2 = len(S2)


dp = [[0] * (len_S2 + 1) for _ in range(len_S1 + 1)]

for i in range(len_S1):
    for j in range(len_S2):
        if S1[i] == S2[j]:
            dp[i + 1][j + 1] = dp[i][j] + 1
        else:
            dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])

res = ''
while dp[len_S1][len_S2] != 0:
    if dp[len_S1][len_S2] == dp[len_S1 - 1][len_S2]:
        len_S1 -= 1
    elif dp[len_S1][len_S2] == dp[len_S1][len_S2 - 1]:
        len_S2 -= 1
    elif dp[len_S1][len_S2] -1 == dp[len_S1-1][len_S2 - 1]:
        res += S1[len_S1 - 1]
        len_S1 -= 1
        len_S2 -= 1

print(res[::-1])
# 추적한 공통 부분 문자열을 역순으로 출력합니다.
# 왜냐하면 역추적 과정에서 문자열이 거꾸로 만들어졌기 때문입니다.
# 위의 dp를 출력한 결과인데
# 이때 5에서 시작을 하는데 5에서 대각선 왼쪽 위로 올라가는 경우에 기록을 한다
# 4에서도 마찬가지로 왼쪽 위로 올라가는 경우를 기록한다
# 0 나올때까지 반복한다.
# 그리고 이를 역순으로 나열한다

# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
# [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
# [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
# [0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2],
# [0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2],
# [0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2],
# [0, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3],
# [0, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3],
# [0, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4],
# [0, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4],
# [0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5]

# memory 31120
# time 32